<?php

/**
 * Test for Ting Open Search.
 */
class TingClientScanTest extends TingClientTest {
  function __construct($test_id = NULL, $includes = array()) {

    $includes[] = '/../lib/request/TingClientScanRequest.php';
    $includes[] = '/../lib/result/scan/TingClientScanResult.php';
    $includes[] = '/../lib/result/scan/TingClientScanTerm.php';
    parent::__construct($test_id, $includes);
  }

  /**
   * Test info.
   */
  public static function getInfo() {
    return array(
      'name' => 'Ting Client scan',
      'description' => 'Test the Ting Open Scan (autocomplete) client.' ,
      'group' => 'Ting Client',
    );
  }

  public function testScan() {
    $scanRequest = $this->requestFactory->getScanRequest();
    $scanRequest->setField('phrase.title');
    $scanRequest->setLower('KÃ¸benhavn');
    $scanRequest->setNumResults(10);
    $scanResult = $this->client->execute($scanRequest);

    $this->assertTrue(sizeof($scanResult->terms) > 1, 'Returned number of results (' . sizeof($scanResult->terms) . ') exceeds one.');
  }

  public function testScanResult() {
    $query = 'KÃ¸benhavn';
    $numResults = 3;

    $scanRequest = $this->requestFactory->getScanRequest();
    $scanRequest->setField('phrase.title');
    $scanRequest->setLower($query);
    $scanRequest->setNumResults($numResults);
    $scanResult = $this->client->execute($scanRequest);

    $this->assertEqual(sizeof($scanResult->terms), $numResults, 'Returned number of results (' . sizeof($scanResult->terms) . ') matches the expected number of results (' . $numResults . ').');
  }

  public function testScanAgency() {
    $query = 'KÃ¸benhavn';
    $numResults = 3;

    $scanRequest = $this->requestFactory->getScanRequest();
    $scanRequest->setField('phrase.title');
    $scanRequest->setLower($query);
    $scanRequest->setNumResults($numResults);
    $scanRequest->setAgency(710100); // Use Copenhagen agency
    $scanResult = $this->client->execute($scanRequest);
    $this->assertEqual(sizeof($scanResult->terms), $numResults, 'Returned number of results (' . sizeof($scanResult->terms) . ') matches the expected number of results (' . $numResults . ').');

    $scanRequest->setAgency('foo'); // Use bogus agency
    $scanResult = $this->client->execute($scanRequest);

    $this->assertEqual(sizeof($scanResult->terms), 0, 'Should not return results for invalid agency. Returned ' . sizeof($scanResult->terms) . ' results.');
  }
}

