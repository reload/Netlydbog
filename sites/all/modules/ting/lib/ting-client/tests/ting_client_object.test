<?php

/**
 * Test for Ting Open Search object.
 */
class TingClientObjectTest extends TingClientTest {
  function __construct($test_id = NULL, $includes = array()) {

    $includes[] = '/../lib/request/TingClientSearchRequest.php';
    $includes[] = '/../lib/request/TingClientObjectRequest.php';
    $includes[] = '/../lib/result/object/TingClientObject.php';
    $includes[] = '/../lib/result/object/TingClientObjectCollection.php';
    $includes[] = '/../lib/result/object/data/TingClientObjectData.php';
    $includes[] = '/../lib/result/search/TingClientSearchResult.php';
    parent::__construct($test_id, $includes);
  }

  /**
   * Test info.
   */
  public static function getInfo() {
    return array(
      'name' => 'Ting Client object',
      'description' => 'Test the Ting Open Search object API.' ,
      'group' => 'Ting Client',
    );
  }

  /**
   * Test to retrieve an object with an object id from a search result,
   * perform a separate query for this id and ensure that the result is equal
   * to the original object.
   */
  public function testObjectRetrieval() {
    $searchRequest = $this->requestFactory->getSearchRequest();
    $searchRequest->setQuery('dc.title=danmark');
    $searchRequest->setNumResults(1);
    $searchResult = $this->client->execute($searchRequest);
    $this->assertTrue(sizeof($searchResult->collections) == 1, 'Search should return exactly one result.');

    $searchObject = $searchResult->collections[0]->objects[0];
    $this->assertNotNull($searchObject, 'Search should return at least one collection containing one object.');

    $objectRequest = $this->requestFactory->getObjectRequest();
    $objectRequest->setObjectId($searchObject->id);
    $searchRequest->setNumResults(1);
    $object = $this->client->execute($objectRequest);

    $this->assertEqual($searchObject, $object, 'Retrieved object should be equal to search result.');
  }

  public function testObjectRetrievalByLocalId() {
    $searchRequest = $this->requestFactory->getSearchRequest();
    $searchRequest->setQuery('dc.title=danmark');
    $searchRequest->setNumResults(1);
    $searchResult = $this->client->execute($searchRequest);

    $this->assertTrue(sizeof($searchResult->collections) > 0, 'Search should return at least one result.');

    $localId = null;
    $searchObject = null;
    foreach ($searchResult->collections as $collection) {
      foreach ($collection->objects as $object) {
        if ($object->localId) {
          $localId = $object->localId;
          $ownerId = $object->ownerId;
          $searchObject = $object;
          break 2;
        }
      }
    }
    $this->assertNotNull($localId, 'Search should return at least one object containing a local id.');

    $objectRequest = $this->requestFactory->getObjectRequest();
    $objectRequest->setLocalId($localId);

    // TODO: This test does not currently pass without setting agency, 
    // due to the : operation being discontinued.
    $objectRequest->setAgency($ownerId);
    $object = $this->client->execute($objectRequest);

    $this->assertEqual($searchObject, $object, 'Retrieved object should be equal to search result.');
  }
}

