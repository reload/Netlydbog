<?php
/**
 * @file
 * Displays facet browser and search results from the Ting database.
 */

/**
 * Implementation of hook_theme().
 */
function ting_search_theme() {
  return array(
    'ting_search_result_page' => array(
      'arguments' => array('keys' => NULL, 'tabs' => NULL),
      'template' => 'ting_search_result_page'
    ),
    'ting_search' => array(
      'arguments' => array('result' => NULL),
      'template' => 'ting_search'
    ),
    'ting_result' => array(
      'arguments' => array('record' => NULL),
      'template' => 'ting_result'
    ),
    'ting_result_pager' => array(
      'arguments' => array('record' => NULL),
      'template' => 'ting_result_pager'
    ),
    'ting_search_collection' => array(
      'arguments' => array('collection' => NULL),
      'template' => 'ting_search_collection',
      'file' => drupal_get_path('module', 'ting') . '/ting.theme.inc',
    ),
    'ting_facet_browser' => array(
      'arguments' => array('result' => NULL),
      'function' => 'ting_search_facet_browser'
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function ting_search_menu() {
  $items = array();

  $items['ting/search'] = array(
    'title' => 'Ting search',
    'description' => 'Provides a redirect to the Panels search page, if applicable, otherwise 404.',
    'access arguments' => array('search content'),
    'page callback' => 'ting_search_pages_redirect',
    'type' => MENU_CALLBACK,
    'file' => 'ting_search.pages.inc',
  );

  $items['ting/search/js'] = array(
    'title' => 'Ting search results',
    'description' => 'Lists facets and search results from the Ting database as HTML or JSON.',
    'access arguments' => array('search content'),
    'page callback' => 'ting_search_pages_ting_js',
    'type' => MENU_CALLBACK,
    'file' => 'ting_search.pages.inc',
  );

  $items['ting/search/content/js'] = array(
    'title' => 'Content search AJAX page callback',
    'page callback' => 'ting_search_pages_content_js',
    'access arguments' => array('search content'),
    'type' => MENU_CALLBACK,
    'file' => 'ting_search.pages.inc',
  );

  $items['ting/search/feed/%'] = array(
    'title' => 'Ting search feed',
    'description' => 'Provides an Atom feed of Ting search results',
    'access arguments' => array('search content'),
    'page callback' => 'ting_search_pages_ting_feed',
    'page arguments' => array(3),
    'type' => MENU_CALLBACK,
    'file' => 'ting_search.pages.inc',
  );

  $items['ting/search/content/feed/%'] = array(
    'title' => 'Ting search feed',
    'description' => 'Provides an Atom feed of content search results',
    'access arguments' => array('search content'),
    'page callback' => 'ting_search_pages_content_feed',
    'page arguments' => array(4),
    'type' => MENU_CALLBACK,
    'file' => 'ting_search.pages.inc',
  );

  return $items;
}

/**
 * Implementation of hook_block().
 */
function ting_search_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      return array(
        array(
          'info' => t('Ting search box – for page header'),
          'cache' => BLOCK_NO_CACHE,
          'status' => 1,
          'region' => 'search',
        ),
      );
    case 'view':
      return array(
        'subject' => t('Search'),
        'content' => drupal_get_form('ting_search_form'),
      );
  }
}

/**
 * Implementation of hook_ctools_plugin_api().
 */
function ting_search_ctools_plugin_api($module, $api) {
  if ($module == 'page_manager' && $api == 'pages_default') {
    return array('version' => 1);
  }
}

/**
 * Implementation of hook_ctools_plugin_directory().
 *
 * Tells CTools (and thus Panels) where to look for plugin code.
 */
function ting_search_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' || $module == 'panels') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Load Ting search interface JavaScript dependencies.
 */
function ting_search_add_js() {
  $basePath = drupal_get_path('module', 'ting');

  //Add Pure JS templating engine
  drupal_add_js($basePath . '/js/pure/js/pure.js');
  //drupal_add_js($path . '/js/pure/js/purePacked.js');


  $path = drupal_get_path('module', 'ting_search');
  //Add base Prototype files for enhanced OOP
  drupal_add_js($path . '/js/prototype/object.js', 'module', 'footer', TRUE);
  drupal_add_js($path . '/js/prototype/enumerable.js', 'module', 'footer', TRUE);

  //Add jQuery URL plugin
  drupal_add_js($path . '/js/jquery.url/jquery.url.js', 'module', 'footer', TRUE);
  //drupal_add_js($path . '/js/jquery.url/jquery.url.packed.js', 'module', 'footer', TRUE);

  //Add jQuery ScrollTo plugin
  drupal_add_js($path . '/js/jquery.scrollTo/jquery.scrollTo.js', 'module', 'footer', TRUE);
  //drupal_add_js($path . '/js/jquery.scrollTo/jquery.scrollTo-min.js', 'module', 'footer', TRUE);

  // jQuery UI tabs
  jquery_ui_add('ui.tabs');
  jquery_ui_theme_load();

  drupal_add_js($path . '/js/ting_search.js');
  drupal_add_js($path . '/js/ting_result.js', 'module', 'footer', TRUE);
  drupal_add_js($path . '/js/ting_facet_browser.js', 'module', 'footer', TRUE);

  // Allow modules to add javascript handlers
  module_invoke_all('ting_add_js', 'ting_search_view');

  drupal_add_css($path . '/css/ting_facet_browser.css', 'module');

  drupal_add_js(array('tingResult' => array(
    'pagerTemplate' => ting_search_render_pager_template(),
    'pagesInPager' => 5,
    'resizeButtonText' => t('Show more facet terms'),
    'noResultsHeader' => t('No results found'),
    'noResultsText' => t('Sorry, we could not find any results for your search. Please try again with different keywords or ask a librarian.'),
  )), 'setting');

  $facets = array('facet.creator', 'facet.subject', 'facet.type', 'facet.date',
                  'facet.language', 'facet.geographic', 'facet.period', 'facet.form',
                  'facet.fiction', 'facet.nonFiction', 'facet.music', 'facet.dk5',
                  'dc.type', 'facet.category', 'facet.acSource');
  foreach ($facets as $facet) {
    drupal_add_js(array('tingResult' => array('facetNames' => array($facet => t($facet)))), 'setting');
  }
}

function ting_search_render_pager_template() {
  return theme('ting_result_pager');
}

/**
 * Define our own search form.
 *
 * We were having problems with search_form from search.module, so
 * here's a very basic copy of it.
 */
function ting_search_form(&$form_state) {
  $form = array();

  $form['#action'] = url('ting/search');

  $form['keys'] = array(
    '#type' => 'textfield',
    '#title' => t('Enter your search terms here'),
    '#required' => TRUE,
    '#size' => 20,
    '#maxlength' => 255,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
  );

  $form['example_text'] = array(
    '#value' => '<div class="example"><p>' . t('For example:') . '</p>' . theme('item_list', array(
      l('Dan Turèll', 'ting/search/Dan Turèll'),
      l('genteknologi', 'ting/search/genteknologi'),
      l('Ringenes Herre', 'ting/search/Ringenes Herre'),
    )) . '</div>',
  );

  return $form;
}

/**
 * Process a search form submission.
 */
function ting_search_form_submit($form, &$form_state) {
  $form_state['redirect'] = 'ting/search/' . trim($form_state['values']['keys']);
}

/**
 * Second preprocessing for Ting collections in search results.
 */
function ting_search_preprocess_ting_search_collection(&$vars) {
  // Loop through all levels of ting details to create the item lists
  // We do this here instead of in template_preprocess_ting_search_collection()
  // to let other modules preprocess the ting_details structure before it is
  // rendered.
  foreach ($vars['ting_details']  as $title => &$var_name) {
    if (!empty($vars[$var_name])) {
      $var = $vars[$var_name];
      if (!is_array($var)) {
        $var = array($var);
      }
      $var_name = array('class' => _ting_property_classes($var_name),
                        'data' => theme('item_list', $var, $title, 'span'));
      $var = theme('item_list', $var, $title, 'span');
    } else {
      unset($vars['ting_details'][$title]);
    }
  }
  $vars['ting_details'] = theme('item_list', $vars['ting_details'], NULL, 'div', array('class' => 'ting-properties'));
}

/**
 * Template preprocessor for Ting collections in search results.
 */
function template_preprocess_ting_search_collection(&$vars) {
  $collection = $vars['collection'];

  // Extract information about the collection into variable scope
  $vars = array_merge($vars, ting_collection_preprocess($collection));

  // Build search collection details
  // Save preprocessing for ting_search_preprocess_ting_search_collection()
  // to allow other modules to alter this array before rendering it.
  $vars['ting_details'] = array( t('Series') => 'ting_series_links',
                                 t('Classiciation') => 'ting_classification_links',
                                 t('Listing') => 'ting_listing_links',
                                 t('Subjects') => 'ting_subjects_links',
  );

  // Get the picture if we have a valid object.
  if ($collection->objects[0] instanceOf TingClientObject) {
    $image_url = ting_covers_collection_url($collection->objects[0], '80_x');
    if ($image_url) {
      $alt_text = (!empty($vars['ting_creators'])) ? implode(', ', $vars['ting_creators']) . ' / ' : '';
      $alt_text .= $vars['ting_title'];
      $vars['picture'] = l(theme('image', $image_url, $alt_text, $alt_text, null, false), $vars['ting_url'], array('html' => true));
    }
  }

  // Mapping type names to local ids.
  $type_map = array();
  foreach ($collection->objects as $object) {
    $object_vars = ting_object_preprocess($object);
    if (!isset($type_map[$object_vars['ting_type']])) {
      $type_map[$object_vars['ting_type']] = array();
    }
    $type_map[$object_vars['ting_type']][] = $object;
  }

  $links = array();
  foreach ($type_map as $type => $objects) {
    $classes = '';

    foreach ($objects as $object) {
      // TODO: Really, this should go into ting_availability.
      if (ting_object_is($object, 'limited_availability')) {
        $object_vars = ting_object_preprocess($object);
        $classes .= ' ting-object-' . $object_vars['ting_local_id'];
        $title = NULL;
      }
      else {
        // We have at least one object that's always available, show
        // that and break out.
        $classes = 'available';
        $title = t('Available');
        break;
      }
    }

    $links[] = array(
      'data' => $type,
      'class' => trim($classes),
      'title' => $title,
    );
  }

  $vars['type_list'] = theme('item_list', $links, NULL, 'ul', array('class' => 'ting-search-collection-types'));
}
