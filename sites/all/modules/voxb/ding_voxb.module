<?php

// Define reviews per page
define('VOXB_REVIEWS_PER_PAGE', 3);
// Define path to VoxB module
define('VOXB_PATH', drupal_get_path('module', 'ding_voxb'));

/**
 * @file
 *
 * This module provides interaction with VoxB web-service.
 * VoxB service stores user ratings, reviews and tags for ting item.
 *
 */

/**
 * Implements hook_init().
 *
 * Adding JS code to the page for ajax login form.
 */
function ding_voxb_init() {
  drupal_add_css(VOXB_PATH . '/css/voxb-pager.css');
  drupal_add_css(VOXB_PATH . '/css/voxb.css');
  drupal_add_css(VOXB_PATH . '/css/jqModal.css');
  drupal_add_js(VOXB_PATH . '/js/jqModal.js');
  drupal_add_js(VOXB_PATH . '/js/livequery.js');
  drupal_add_js(VOXB_PATH . '/js/cyclic.fade.js');
  drupal_add_js(VOXB_PATH . '/js/voxb.item.js');
}

/**
 * Implements hook_menu().
 */
function ding_voxb_menu() {
  $items = array();

  // Module settings page.
  $items['admin/settings/voxb'] = array(
    'title' => 'VoxB',
    'description' => 'VoxB module settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_voxb_admin'),
    'access arguments' => array('administer site configuration'),
    'file' => 'ding_voxb.admin.inc',
  );

  // VoxB settings link in UI.
  $items['admin/settings/voxb/access'] = array(
    'title' => 'VoxB access',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  // Pager AJAX requests handler,
  //   seeks to a specific pager page, for a specific item.
  $items['voxb/ajax/seek/%/%'] = array(
    'title' => 'VoxB pagination handler',
    'description' => '',
    'page arguments' => array(3, 4),
    'type' => MENU_CALLBACK,
    'access arguments' => array('search content'),
    'page callback' => 'ding_voxb_paginator',
  );

  // Review AJAX requests handler,
  //   retrieves reviews for a specific page, for a specific item.
  $items['voxb/ajax/seek/%/%/reviews'] = array(
    'title' => 'VoxB paging reviews handler',
    'description' => '',
    'page arguments' => array(3, 4),
    'type' => MENU_CALLBACK,
    'access arguments' => array('search content'),
    'page callback' => 'ding_voxb_paging_reviews',
  );

  // Rating AJAX requests handler,
  //   sets specific rating, for a specific item.
  $items['voxb/ajax/rating/%/%'] = array(
    'title' => 'VoxB rating handler',
    'description' => '',
    'page arguments' => array(3, 4),
    'type' => MENU_CALLBACK,
    'access arguments' => array('search content'),
    'page callback' => 'ding_voxb_rating',
  );

  // Tagging AJAX requests handler,
  //   add specific tag, for a specific item.
  $items['voxb/ajax/tag/%/%'] = array(
    'title' => 'VoxB tagging handler',
    'description' => '',
    'page arguments' => array(3, 4),
    'type' => MENU_CALLBACK,
    'access arguments' => array('search content'),
    'page callback' => 'ding_voxb_tag',
  );

  // Review AJAX request handler,
  //   add a review for a specific item.
  $items['voxb/ajax/review/%/%'] = array(
    'title' => 'VoxB review handler',
    'description' => '',
    'page arguments' => array(3, 4),
    'type' => MENU_CALLBACK,
    'access arguments' => array('search content'),
    'page callback' => 'ding_voxb_review',
  );

  // User login AJAX request handler,
  //   authorizes user onto VoxB webservice.
  $items['voxb/ajax/user/login'] = array(
    'title' => 'VoxB users handler',
    'description' => 'Login and/or create users at VoxB',
    'access arguments' => array('search content'),
    'page callback' => 'ding_voxb_user_login',
    'type' => MENU_CALLBACK,
  );

  // VoxB user create AJAX request handler,
  //   creates VoxB accounts for newly logged in users.
  $items['voxb/ajax/user/create'] = array(
    'title' => 'VoxB users handler',
    'description' => 'Login and/or create users at VoxB',
    'access arguments' => array('search content'),
    'page callback' => 'ding_voxb_user_create',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Handle the login procedure.
 *
 * @global $user
 *   Logged in user.
 */
function ding_voxb_user_login() {
  require_once VOXB_PATH . '/lib/VoxbLogin.class.php';
  global $user;
  $response = array();

  //Try login
  $obj = new VoxbLogin();
  $login = $obj->login($user);

  if ($login) {
    $response = array('status' => $login, 'message' => t('VoxB login ok.'));
  }
  else {
    $response = array('status' => $login, 'message' => t('VoxB login failure.'));
  }

  echo json_encode($response);
  exit(1);
}

/**
 * Handle user creation procedure.
 *
 * @global $user
 *   Logged in user.
 */
function ding_voxb_user_create() {
  $response = array();
  $alias_name = isset($_POST['alias_name']) ? check_plain($_POST['alias_name']) : '';

  if (!empty($alias_name)) {
    require_once VOXB_PATH . '/lib/VoxbLogin.class.php';
    global $user;
    $user->voxb['alias_name'] = $alias_name;

    // Try create
    $obj = new VoxbLogin();
    $create = $obj->create($user);

    $response = array('status' => $create, 'message' => t('VoxB ok.'));
  }
  else {
    $response = array('status' => FALSE, 'message' => t('Empty alias name.'));
  }

  echo json_encode($response);
  exit(1);
}

/**
 * Creates and outputs the pagination.
 *
 * @param $faust_number
 *   Item's faust number.
 * @param $page
 *   Current displayed page.
 */
function ding_voxb_paginator($faust_number = '', $page = 1) {
  if ($faust_number != '') {
    require_once(VOXB_PATH . '/lib/VoxbItem.class.php');
    require_once(VOXB_PATH . '/lib/VoxbReviews.class.php');

    $item = new VoxbItem();
    $item->addReviewHandler('review', new VoxbReviews());
    $item->fetchByFaust($faust_number);
    $reviews = $item->getReviews('review');

    $pages = (int)ceil($reviews->getCount() / variable_get('voxb_reviews_per_page', VOXB_REVIEWS_PER_PAGE));
    echo ding_voxb_reviews_pager($pages, $page, $faust_number);
    exit(1);
  }
}

/**
 * Display the reviews at the specific page.
 *
 * @param $faust_number
 *   Item's faust_number
 * @param $page
 *   The page number, which comments are to be displayed
 */
function ding_voxb_paging_reviews($faust_number = '', $page = 1) {
  // Calculate the reviews array fetch limits
  $per_page = variable_get('voxb_reviews_per_page', VOXB_REVIEWS_PER_PAGE);
  $start = ($page - 1) * $per_page;
  $end = $start + $per_page;

  require_once VOXB_PATH . '/lib/VoxbItem.class.php';
  require_once VOXB_PATH . '/lib/VoxbReviews.class.php';

  // Get the reviews
  $item = new VoxbItem();
  $item->addReviewHandler('review', new VoxbReviews());
  $item->fetchByFaust($faust_number);
  $reviews = $item->getReviews('review')->toArray();

  // Place the reviews
  $html = '';
  for ($i = $start; $i < $end; $i++) {
    if (empty($reviews[$i]['text'])) {
      continue;
    }
    $html .= theme(
      'voxb_review_record',
      array(
        'author' => $reviews[$i]['authorName'],
        'review' => $reviews[$i]['text']
      )
    );
  }

  echo $html;
  exit(1);
}

/**
 * Implements hook_theme()
 */
function ding_voxb_theme($existing, $type, $theme, $path) {
  $hooks['voxb_tag_record'] = array(
    'arguments' => array('data' => NULL),
    'template' => 'templates/ding_voxb-tag-record'
  );

  $hooks['voxb_review_record'] = array(
    'arguments' => array('data' => NULL),
    'template' => 'templates/ding_voxb-review-record',
  );

  $hooks['voxb_review_pager'] = array(
    'arguments' => array('data' => NULL),
    'template' => 'templates/ding_voxb-pager',
  );

  $hooks['voxb_review_pager_leaf'] = array(
    'arguments' => array('data' => NULL),
    'template' => 'templates/ding_voxb-pager-leaf'
  );

  $hooks['voxb_rating'] = array(
    'arguments' => array('data' => NULL),
    'template' => 'templates/ding_voxb-rating',
  );

  $hooks['voxb_tags'] = array(
    'arguments' => array('data' => NULL),
    'template' => 'templates/ding_voxb-tags',
  );

  $hooks['voxb_review'] = array(
    'arguments' => array('data' => NULL),
    'template' => 'templates/ding_voxb-review',
  );

  return $hooks;
}

/**
 * Displays the text review form.
 *
 * @param $form_state
 *   The form state.
 * @param $params
 *   Additional parameters as startup form values,
 *     those include:
 *       faust number (ting item ID),
 *       button label (review/update),
 *       review content (in case of review update).
 * @return array
 *   Form structure.
 */
function ding_voxb_review_form(&$form_state, $params) {
  $form = array();

  $form['review_content'] = array(
    '#type' => 'textarea',
    '#default_value' => ($params['action'] == 'update') ? $params['review_content'] : '',
  );

  $form['faust_number'] = array(
    '#type' => 'hidden',
    '#value' => $params['faust_number'],
  );

  $form['review_submit'] = array(
    '#type' => 'submit',
    '#value' => ($params['action'] == 'submit') ? t('Review') : t('Update'),
  );

  return $form;
}

/**
 * AJAX responder for adding a new text review.
 *
 * @param $faust_number
 *   Items faust_number.
 * @param $new_review
 *   The review text.
 */
function ding_voxb_review($faust_number = FALSE, $new_review = FALSE) {
  // Check if we have review message and faustNumber
  if (!$new_review) {
    echo json_encode(array('status' => FALSE, 'message' => t('Empty review!')));
  }
  elseif (!$faust_number) {
    echo json_encode(array('status' => FALSE, 'message' => t('Empty faust number!')));
  }
  else {
    require_once VOXB_PATH . '/lib/VoxbBase.class.php';
    require_once VOXB_PATH . '/lib/VoxbReviewRecord.class.php';

    // add review to to voxb
    $review = new VoxbReviewRecord();

    require_once(VOXB_PATH . '/lib/VoxbProfile.class.php');
    $profile = unserialize($_SESSION['voxb']['profile']);

    if (!$review->create($faust_number, $new_review, $profile)) {
      echo json_encode(array('status' => FALSE, 'message' => t('Service unavailable.')));
    }
    else {
      // update profile object in session
      $profile->updateActedItems();
      $_SESSION['voxb']['profile'] = serialize($profile);

      // Get reviews updated list
      require_once VOXB_PATH . '/lib/VoxbItem.class.php';
      require_once VOXB_PATH . '/lib/VoxbReviews.class.php';

      $item = new VoxbItem();
      $item->addReviewHandler('review', new VoxbReviews());
      $item->fetchByFaust($faust_number);
      $reviews = $item->getReviews('review');
      $reviews_count = $reviews->getCount();

      // Limit the count of displayed text reviews
      $limit = variable_get('voxb_reviews_per_page', VOXB_REVIEWS_PER_PAGE);

      // Loop through reviews and display them
      $html = '';
      foreach ($reviews as $k => $review) {
        if ($k >= $limit) {
          break;
        }

        $html .= theme(
          'voxb_review_record',
          array(
            'author' => $review->getAuthorName(),
            'review' => $review->getText())
          );
      }
      echo json_encode(array('status' => TRUE, 'message' => $html));
    }
  }
}

/**
 * Display a form for adding tags
 *
 * @param $form_state
 *   The form state
 * @param $faust_number
 *   Item's faust number
 * @return
 *   Form structure
 */
function ding_voxb_tag_form(&$form_state, $faust_number) {
  $form = array();

  $form['name'] = array(
    '#type' => 'textfield',
    '#size' => 20,
    '#name' => 'name',
  );

  $form['faust_number'] = array(
    '#type' => 'hidden',
    '#name' => 'faust_number',
    '#value' => $faust_number,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  return $form;
}

/**
 * AJAX responder for adding tags
 *
 * @param $faust_number
 *   Items faust number.
 * @param $tag
 *   The new tag to be added.
 */
function ding_voxb_tag($faust_number = FALSE, $tag = FALSE) {
  if (!$tag) {
    echo json_encode(array('status' => FALSE, 'message' => t('Empty tag!')));
  }
  elseif (!$faust_number) {
    echo json_encode(array('status' => FALSE, 'message' => t('Empty faust number!')));
  }
  else {
    require_once VOXB_PATH . '/lib/VoxbItem.class.php';
    require_once VOXB_PATH . '/lib/VoxbProfile.class.php';
    $new_tag = new VoxbTagRecord();
    $profile = unserialize($_SESSION['voxb']['profile']);

    if (!$new_tag->create($faust_number, $tag, $profile)) {
      echo json_encode(array('status' => FALSE, 'message' => t('Service unavailable.')));
    }
    else {
      // update profile object in session
      $profile->updateActedItems();
      $_SESSION['voxb']['profile'] = serialize($profile);

      echo json_encode(array('status' => TRUE, 'message' => $tag));
    }
  }
}

/**
 * AJAX responder for adding rating
 *
 * @param $faust_number
 *   Item's faust_number
 * @param $rating
 *   The rating to be set
 */
function ding_voxb_rating($faust_number = FALSE, $rating = 0) {
  $rating = intval($rating);

  if ($rating == 0) {
    echo json_encode(array('status' => FALSE, 'message' => t('Empty rating!')));
  }
  elseif (!$faust_number) {
    echo json_encode(array('status' => FALSE, 'message' => t('Empty faust number!')));
  }
  else {
    require_once VOXB_PATH . '/lib/VoxbItem.class.php';
    require_once VOXB_PATH . '/lib/VoxbProfile.class.php';

    $item = new VoxbItem();

    $profile = unserialize($_SESSION['voxb']['profile']);
    $record_id = $profile->getVoxbUserData($faust_number);
    $r = NULL;

    if ($record_id == NULL) {
      $r = $item->rateItem($faust_number, $rating * 20, $_SESSION['voxb']['userId']);
    }
    else {
      $r = $item->updateRateItem($record_id['voxbIdentifier'], $rating * 20);
      // update profile object in session
    }
    $profile->updateActedItems();
    $_SESSION['voxb']['profile'] = serialize($profile);

    if ($r) {
      // Rating is successfully submited
      // Now we need to fetch new rating form VoxB
      $item->fetchByFaust($faust_number);
      echo json_encode(array('status' => TRUE, 'rating' => intval($item->getRating() / 20), 'rating_count' => $item->getRatingCount()));
    }
    else {
      echo json_encode(array('status' => FALSE, 'message' => t('Service unavailable.')));
    }
  }
}

/**
 * Implementation of hook_ctools_plugin_directory().
 */
function ding_voxb_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implementation of hook_preprocess_ting_object().
 *
 * Enrich ting object with VoxB stuff.
 */
function ding_voxb_preprocess_ting_object(&$variables) {
  global $user;

  $faust_number = $variables['object']->localId;

  require_once(VOXB_PATH . '/lib/VoxbItem.class.php');
  require_once(VOXB_PATH . '/lib/VoxbProfile.class.php');
  require_once(VOXB_PATH . '/lib/VoxbReviews.class.php');

  $voxb_item = new VoxbItem();
  $voxb_item->addReviewHandler('review', new VoxbReviews());
  $voxb_item->fetchByFaust($faust_number);
  $profile = unserialize($_SESSION['voxb']['profile']);

  // Tagging section
  $is_able_to_tag = ($user->uid) ? TRUE : FALSE;
  $tags = '';
  
  // Prepare tags for display.
  foreach ($voxb_item->getTags() as $v) {
    $tags .= theme('voxb_tag_record', array('tag_name' => htmlspecialchars($v->getName())));
  }

  $tag_form = '';
  if ($is_able_to_tag) {
    $tag_form = drupal_get_form('ding_voxb_tag_form', $faust_number);
  }

  $voxb_tags = theme(
    'voxb_tags',
    array(
      'tags' => $tags,
      'tag_form' => $tag_form,
    )
  );

  $variables['object']->voxb_tags = $voxb_tags;

  // Reviewing section
  $is_able_to_review = ($user->uid) ? TRUE : FALSE;
  $user_data = ($profile && is_object($profile)) ? $profile->getVoxbUserData($faust_number) : array();

  $limit = variable_get('voxb_reviews_per_page', VOXB_REVIEWS_PER_PAGE);
  $reviews = '';

  // Prepare the needed number of existing reviews.
  foreach ($voxb_item->getReviews('review') as $k => $v) {
    if ($k >= $limit) {
      break;
    }

    $reviews .= theme('voxb_review_record',
      array('author' => htmlspecialchars($v->getAuthorName()), 'review' => htmlspecialchars($v->getText()))
    );
  }

  $review_form = '';
  
  // Either show review form only if user has no reviews at all,
  //   or he reviewed with a text review.
  // Also fill the form with the review if it exists and set correct button values.
  if ($is_able_to_review) {
    if (isset($user_data['review']['title']) && $user_data['review']['title'] == 'review') {
      $params = array(
        'faust_number' => $faust_number,
        'review_content' => $user_data['review']['data'],
        'action' => 'update',
      );
    }
    else {
      $params = array(
        'faust_number' => $faust_number,
        'review_content' => '',
        'action' => 'submit',
      );
    }

    $review_form = drupal_get_form('ding_voxb_review_form', $params);
  }

  // Reviews pager
  $pages = (int)ceil($voxb_item->getReviews('review')->getCount() / variable_get('voxb_reviews_per_page', VOXB_REVIEWS_PER_PAGE));
  $voxb_pager = ding_voxb_reviews_pager($pages, 1, $faust_number);

  $voxb_reviews = theme(
          'voxb_review',
          array(
            'voxb_item' => $voxb_item,
            'reviews' => $reviews,
            'review_form' => $review_form,
            'pager' => $voxb_pager,
          )
  );
  
  $variables['object']->voxb_reviews = $voxb_reviews;

  // Rating section
  // Since voxb stores rating in within 0-100 range, divide the actual rating to 20,
  // to process 5 stars.
  $is_able_to_rate = ($user->uid) ? TRUE : FALSE;
  $voxb_rating = theme(
    'voxb_rating',
    array(
      'rating' => intval($voxb_item->getRating() / 20),
      'rating_count' => intval($voxb_item->getRatingCount()),
      'able' => $is_able_to_rate,
      'faust_number' => $faust_number
    )
  );

  $variables['object']->voxb_rating = $voxb_rating;
}

/**
 * Build pager for VoxB reviews.
 *
 * @param $pages
 *   The total amount of pages with reviews.
 * @param $current
 *   Current page.
 * @param $faust_number
 *   Item faust number.
 * @return
 *   Pager markup
 */
function ding_voxb_reviews_pager($pages = 1, $current = 1, $faust_number = '') {
  if ($pages > 1) {
    $pager_leaves = '';
    $count = 5;
    $prev = ($current - 1) > 0 ? $current - 1 : 1;
    $next = $current + 1 < $pages ? $current + 1 : $pages;
    $offset = 2;

    for ($i = $current; $i <= $count + ($current - 1); $i++) {
      $classes = array('page-num');
      $page_label = $i - $offset;

      if ($page_label == $current) {
        $classes[] = 'active-page';
      }

      $pager_leaves .= theme(
              'voxb_review_pager_leaf',
              array(
                'link' => ($page_label > 0 && $page_label <= $pages) ? ($i - 2) : '',
                'path' => ($page_label > 0 && $page_label <= $pages) ? 'voxb/ajax/seek/' . $faust_number . '/' . $page_label : '',
                'current' => $current,
                'classes' => $classes
              )
      );
    }

    $voxb_pager = theme(
            'voxb_review_pager',
            array(
              'previous' => $prev,
              'next' => $next,
              'faust_number' => $faust_number,
              'leaves' => $pager_leaves,
            )
    );

    return $voxb_pager;
  }

  return '';
}
